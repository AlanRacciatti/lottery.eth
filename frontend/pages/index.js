import { useState, useEffect } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useWeb3React } from "@web3-react/core";
import { InjectedConnector } from "@web3-react/injected-connector";
import { ethers } from "ethers";
import { abi } from "../constants/abi";
import { Button, Hero, Icon, useNotification } from "web3uikit";
import { formatTime } from "../utils/formatTime";

const injected = new InjectedConnector();
const CONTRACT_ADDRESS = "0xb5F1a8328CB3C6370881891a9526A42ed77c5Bdb";
const CONTRACT_OWNER = "0xA853Ad7156aaC80A5Ff6F8dcC32146d18f01E441";
const ticketImg = "/ticket.svg";

export default function Home() {
  const {
    chainId,
    account,
    activate,
    active,
    library: provider,
  } = useWeb3React();

  const [contract, setContract] = useState(null);
  const [lotteries, setLotteries] = useState([]);
  const [isCreatingLottery, setIsCreatingLottery] = useState(false);
  const [isBuyingTicket, setIsBuyingTicket] = useState(false);
  const dispatch = useNotification();

  async function connect(provider) {
    try {
      await activate(provider);
    } catch (error) {
      console.log(error);
    }
  }

  function handleNewNotification({ type, icon, title, message, position }) {
    dispatch({
      type,
      icon,
      title,
      message,
      position: position || "topR",
    });
  }

  async function createLottery(ticketPrice, seconds) {
    try {
      let price = ethers.utils.parseEther("0.0001");
      let time = 60 * 1;
      contract.createLottery(price, time);
      setIsCreatingLottery(true);
    } catch (error) {
      setIsCreatingLottery(false);
      console.log(error);
    }
  }

  async function participate(lotteryId, ticketPrice) {
    try {
      setIsBuyingTicket(true);
      await contract.participate(lotteryId, { value: ticketPrice });
    } catch (error) {
      console.log(error);
      setIsBuyingTicket(false);
    }
  }

  async function updateLotteries() {
    if (active) {
      try {
        let lotteries = await contract.getLotteries();
        setLotteries(lotteries);
      } catch (error) {
        console.log(error);
      }
    }
  }

  async function switchToRinkebyNetwork() {
    try {
      await provider.provider.request({
        method: "wallet_switchEthereumChain",
        params: [{ chainId: "0x4" }],
      });
    } catch (error) {
      console.log(error);
    }
  }

  useEffect(() => {
    if (active) {
      if (chainId !== 4) switchToRinkebyNetwork();
      const signer = provider.getSigner();
      const contract = new ethers.Contract(CONTRACT_ADDRESS, abi, signer);
      setContract(contract);
    }
  }, [active, provider, chainId]);

  useEffect(() => {
    if (active) {
      updateLotteries();

      contract.on(
        "LotteryCreated",
        (lotteryId, ticketPrice, prize, endDate) => {
          lotteryId = parseInt(lotteryId, 16);
          updateLotteries();
          handleNewNotification({
            type: "Success",
            title: "Lottery Created",
            message: `Lottery ${lotteryId + 1} created successfully`,
          });

          setIsCreatingLottery(false);
        }
      );

      contract.on("PrizeIncreased", (lotteryId, lotteryPrize) => {
        setIsBuyingTicket(false);
        updateLotteries();

        let parsedLotteryId = parseInt(lotteryId, 16);
        let parsedLotterPrize = ethers.utils.formatEther(lotteryPrize);
        handleNewNotification({
          type: "Success",
          title: "Prize Increased",
          message: `Prize of lottery ${
            parsedLotteryId + 1
          } increased to ${parsedLotterPrize}`,
        });
      });

      contract.on("WinnerDeclared", (requestId, lotteryId, winner) => {
        updateLotteries();
        console.log("Winner declared");
      });
    }
  }, [contract]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Lottery</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>
        <h1 className={styles.title}>Lottery</h1>
        <h5 className={styles.info}>
          Your gambling time with your friends is just 1 click away!
        </h5>
        {active ? (
          <>
            {account == CONTRACT_OWNER ? (
              <div className={styles.connected}>
                <Button
                  icon="plus"
                  text="Create lottery"
                  theme="primary"
                  type="button"
                  onClick={() => createLottery()}
                  loadingText="Creating lottery..."
                  isLoading={isCreatingLottery}
                  className={styles.buttonMetamask}
                  isFullWidth={true}
                />
              </div>
            ) : (
              <></>
            )}
            <div className={styles.lotteries}>
              {lotteries.map((lottery, i) => {
                let [
                  lotteryId,
                  participants,
                  ticketPrice,
                  prize,
                  winner,
                  isFinished,
                  endDate,
                ] = lottery;

                // parse lottery id from 0x00 to 0
                let parsedLotteryId = parseInt(lotteryId, 16);
                let parsedTicketPrice = ethers.utils.formatEther(ticketPrice);
                let parsedPrize = ethers.utils.formatEther(prize);
                let parsedEndDate = formatTime(endDate);

                // Parse big number to number
                let endDateWasReached = new Date(endDate * 1000) < new Date();
                console.log(parsedLotteryId);
                console.log(endDateWasReached);

                return (
                  <Hero
                    align="left"
                    className={styles.hero}
                    height="240px"
                    linearGradient="linear-gradient(113.54deg, rgba(60, 87, 140, 0.5) 14.91%, rgba(70, 86, 169, 0.5) 43.21%, rgba(125, 150, 217, 0.345) 44.27%, rgba(129, 161, 225, 0.185) 55.76%), linear-gradient(151.07deg, #141659 33.25%, #4152A7 98.24%)"
                    rounded="20px"
                    textColor="#fff"
                    title={"Lottery " + (parsedLotteryId + 1)}
                    key={i}
                  >
                    <div className={styles.lotteryData}>
                      <h3 className={styles.lotteryPrize}>
                        <span>
                          Prize: <b>{parsedPrize}</b>
                        </span>
                        <Icon fill="#000000" size={16} svg="eth" />
                      </h3>
                      <div className={styles.lotteryItem}>
                        <span>
                          Ticket price: <b>{parsedTicketPrice}</b>
                        </span>
                        <Icon fill="#000000" size={16} svg="eth" />
                      </div>
                      <div className={styles.lotteryItem}>
                        <span>
                          Tickets bought: <b>{participants.length}</b>
                        </span>
                        <Image
                          src={ticketImg}
                          alt="Ticket"
                          width={32}
                          height={16}
                        ></Image>
                      </div>
                      <div className={styles.lotteryItem}>
                        <span>
                          End date: <b>{parsedEndDate}</b>
                        </span>
                      </div>
                    </div>
                    <div>
                      <Button
                        icon="plus"
                        disabled={endDateWasReached}
                        text="Buy a ticket"
                        isLoading={isBuyingTicket}
                        loadingText="Buying ticket..."
                        onClick={() => participate(lotteryId, ticketPrice)}
                        theme="primary"
                      />
                    </div>
                  </Hero>
                );
              })}
            </div>
          </>
        ) : (
          <div className={styles.disconnected}>
            <Button
              text="Connect Metamask"
              theme="colored"
              icon="metamaskLined"
              color="yellow"
              onClick={() => connect(injected)}
              type="button"
              className={styles.buttonMetamask}
              isFullWidth={true}
            />
          </div>
        )}
      </>
    </div>
  );
}
